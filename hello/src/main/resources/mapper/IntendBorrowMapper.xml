<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="loan.easyLoan.mapper.IntendBorrowMapper">
  <resultMap id="BaseResultMap" type="loan.easyLoan.entity.IntendBorrow">
    <id column="bill_id" jdbcType="INTEGER" property="billId" />
    <result column="id_card" jdbcType="CHAR" property="idCard" />
    <result column="intend_money" jdbcType="DOUBLE" property="intendMoney" />
    <result column="start_date" jdbcType="TIMESTAMP" property="startDate" />
    <result column="pay_rate" jdbcType="REAL" property="payRate" />
    <result column="pay_type" jdbcType="INTEGER" property="payType" />
    <result column="limit_months" jdbcType="INTEGER" property="limitMonths" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="raised_money" jdbcType="DOUBLE" property="raisedMoney" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    bill_id, id_card, intend_money, start_date, pay_rate, pay_type, limit_months, state, 
    raised_money
  </sql>
  <select id="selectByExample" parameterType="loan.easyLoan.entity.IntendBorrowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from intend_borrow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from intend_borrow
    where bill_id = #{billId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from intend_borrow
    where bill_id = #{billId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="loan.easyLoan.entity.IntendBorrowExample">
    delete from intend_borrow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="loan.easyLoan.entity.IntendBorrow">
    insert into intend_borrow (bill_id, id_card, intend_money, 
      start_date, pay_rate, pay_type, 
      limit_months, state, raised_money
      )
    values (#{billId,jdbcType=INTEGER}, #{idCard,jdbcType=CHAR}, #{intendMoney,jdbcType=DOUBLE}, 
      #{startDate,jdbcType=TIMESTAMP}, #{payRate,jdbcType=REAL}, #{payType,jdbcType=INTEGER}, 
      #{limitMonths,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, #{raisedMoney,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="loan.easyLoan.entity.IntendBorrow">
    insert into intend_borrow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="billId != null">
        bill_id,
      </if>
      <if test="idCard != null">
        id_card,
      </if>
      <if test="intendMoney != null">
        intend_money,
      </if>
      <if test="startDate != null">
        start_date,
      </if>
      <if test="payRate != null">
        pay_rate,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="limitMonths != null">
        limit_months,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="raisedMoney != null">
        raised_money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="billId != null">
        #{billId,jdbcType=INTEGER},
      </if>
      <if test="idCard != null">
        #{idCard,jdbcType=CHAR},
      </if>
      <if test="intendMoney != null">
        #{intendMoney,jdbcType=DOUBLE},
      </if>
      <if test="startDate != null">
        #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payRate != null">
        #{payRate,jdbcType=REAL},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="limitMonths != null">
        #{limitMonths,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="raisedMoney != null">
        #{raisedMoney,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="loan.easyLoan.entity.IntendBorrowExample" resultType="java.lang.Long">
    select count(*) from intend_borrow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update intend_borrow
    <set>
      <if test="record.billId != null">
        bill_id = #{record.billId,jdbcType=INTEGER},
      </if>
      <if test="record.idCard != null">
        id_card = #{record.idCard,jdbcType=CHAR},
      </if>
      <if test="record.intendMoney != null">
        intend_money = #{record.intendMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.startDate != null">
        start_date = #{record.startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payRate != null">
        pay_rate = #{record.payRate,jdbcType=REAL},
      </if>
      <if test="record.payType != null">
        pay_type = #{record.payType,jdbcType=INTEGER},
      </if>
      <if test="record.limitMonths != null">
        limit_months = #{record.limitMonths,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.raisedMoney != null">
        raised_money = #{record.raisedMoney,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update intend_borrow
    set bill_id = #{record.billId,jdbcType=INTEGER},
      id_card = #{record.idCard,jdbcType=CHAR},
      intend_money = #{record.intendMoney,jdbcType=DOUBLE},
      start_date = #{record.startDate,jdbcType=TIMESTAMP},
      pay_rate = #{record.payRate,jdbcType=REAL},
      pay_type = #{record.payType,jdbcType=INTEGER},
      limit_months = #{record.limitMonths,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      raised_money = #{record.raisedMoney,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="loan.easyLoan.entity.IntendBorrow">
    update intend_borrow
    <set>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=CHAR},
      </if>
      <if test="intendMoney != null">
        intend_money = #{intendMoney,jdbcType=DOUBLE},
      </if>
      <if test="startDate != null">
        start_date = #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payRate != null">
        pay_rate = #{payRate,jdbcType=REAL},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="limitMonths != null">
        limit_months = #{limitMonths,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="raisedMoney != null">
        raised_money = #{raisedMoney,jdbcType=DOUBLE},
      </if>
    </set>
    where bill_id = #{billId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="loan.easyLoan.entity.IntendBorrow">
    update intend_borrow
    set id_card = #{idCard,jdbcType=CHAR},
      intend_money = #{intendMoney,jdbcType=DOUBLE},
      start_date = #{startDate,jdbcType=TIMESTAMP},
      pay_rate = #{payRate,jdbcType=REAL},
      pay_type = #{payType,jdbcType=INTEGER},
      limit_months = #{limitMonths,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      raised_money = #{raisedMoney,jdbcType=DOUBLE}
    where bill_id = #{billId,jdbcType=INTEGER}
  </update>
</mapper>