<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="loan.easyLoan.mapper.WithdrawRecordMapper">
  <resultMap id="BaseResultMap" type="loan.easyLoan.entity.WithdrawRecord">
    <id column="serial_number" jdbcType="INTEGER" property="serialNumber" />
    <result column="withdraw_date" jdbcType="TIMESTAMP" property="withdrawDate" />
    <result column="withdraw_money" jdbcType="DOUBLE" property="withdrawMoney" />
    <result column="bank_account" jdbcType="CHAR" property="bankAccount" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    serial_number, withdraw_date, withdraw_money, bank_account
  </sql>
  <select id="selectByExample" parameterType="loan.easyLoan.entity.WithdrawRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from withdraw_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from withdraw_record
    where serial_number = #{serialNumber,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from withdraw_record
    where serial_number = #{serialNumber,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="loan.easyLoan.entity.WithdrawRecordExample">
    delete from withdraw_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="loan.easyLoan.entity.WithdrawRecord">
    insert into withdraw_record (serial_number, withdraw_date, withdraw_money, 
      bank_account)
    values (#{serialNumber,jdbcType=INTEGER}, #{withdrawDate,jdbcType=TIMESTAMP}, #{withdrawMoney,jdbcType=DOUBLE}, 
      #{bankAccount,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="loan.easyLoan.entity.WithdrawRecord">
    insert into withdraw_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="serialNumber != null">
        serial_number,
      </if>
      <if test="withdrawDate != null">
        withdraw_date,
      </if>
      <if test="withdrawMoney != null">
        withdraw_money,
      </if>
      <if test="bankAccount != null">
        bank_account,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="serialNumber != null">
        #{serialNumber,jdbcType=INTEGER},
      </if>
      <if test="withdrawDate != null">
        #{withdrawDate,jdbcType=TIMESTAMP},
      </if>
      <if test="withdrawMoney != null">
        #{withdrawMoney,jdbcType=DOUBLE},
      </if>
      <if test="bankAccount != null">
        #{bankAccount,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="loan.easyLoan.entity.WithdrawRecordExample" resultType="java.lang.Long">
    select count(*) from withdraw_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update withdraw_record
    <set>
      <if test="record.serialNumber != null">
        serial_number = #{record.serialNumber,jdbcType=INTEGER},
      </if>
      <if test="record.withdrawDate != null">
        withdraw_date = #{record.withdrawDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.withdrawMoney != null">
        withdraw_money = #{record.withdrawMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.bankAccount != null">
        bank_account = #{record.bankAccount,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update withdraw_record
    set serial_number = #{record.serialNumber,jdbcType=INTEGER},
      withdraw_date = #{record.withdrawDate,jdbcType=TIMESTAMP},
      withdraw_money = #{record.withdrawMoney,jdbcType=DOUBLE},
      bank_account = #{record.bankAccount,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="loan.easyLoan.entity.WithdrawRecord">
    update withdraw_record
    <set>
      <if test="withdrawDate != null">
        withdraw_date = #{withdrawDate,jdbcType=TIMESTAMP},
      </if>
      <if test="withdrawMoney != null">
        withdraw_money = #{withdrawMoney,jdbcType=DOUBLE},
      </if>
      <if test="bankAccount != null">
        bank_account = #{bankAccount,jdbcType=CHAR},
      </if>
    </set>
    where serial_number = #{serialNumber,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="loan.easyLoan.entity.WithdrawRecord">
    update withdraw_record
    set withdraw_date = #{withdrawDate,jdbcType=TIMESTAMP},
      withdraw_money = #{withdrawMoney,jdbcType=DOUBLE},
      bank_account = #{bankAccount,jdbcType=CHAR}
    where serial_number = #{serialNumber,jdbcType=INTEGER}
  </update>
</mapper>